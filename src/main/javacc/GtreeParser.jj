/*
 * Copyright 2009 Jiemamy Project and the Others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
options {
    STATIC = false;
    UNICODE_INPUT = true;
    LOOKAHEAD = 1;
}

PARSER_BEGIN(GtreeParser0)
/*
 * Copyright 2009 Jiemamy Project and the Others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
package org.jiemamy.utils.gtree.text;

import java.util.Collections;
import java.util.ArrayList;
import java.util.List;

import org.jiemamy.utils.gtree.model.*;

class GtreeParser0 {
    
    private ThreadLocal<Variables> variables = new ThreadLocal<Variables>();
    
    /**
     * Parse and returns the analyzed Generic Tree Model.
     * @return the analyzed model
     * @throws ParseException if parse was failed
     */
    public Value parse(Variables vars) throws ParseException {
        variables.set(vars);
        try {
            return script();
        }
        finally {
            variables.set(null);
        }
    }
    
    private Value resolve(Token variable) throws ParseException {
        Variables vars = variables.get();
        if (vars == null) {
            vars = Variables.NULL;
        }
        return vars.resolve(variable);
    }

    private static <T> List<T> list() {
        return new ArrayList<T>();
    }
}
PARSER_END(GtreeParser0)

MORE : 
{   "//" : IN_LINE_COMMENT
|   "/*" : IN_BLOCK_COMMENT
}

<IN_LINE_COMMENT> SPECIAL_TOKEN :
{   <END_LINE_COMMENT: "\r"|"\n"|"\r\r"|"\r\n"> : DEFAULT
}

<IN_BLOCK_COMMENT> SPECIAL_TOKEN :
{   <END_BLOCK_COMMENT : "*/"> : DEFAULT
}

<IN_LINE_COMMENT, IN_BLOCK_COMMENT> MORE :
{   < ~[] >
}

SPECIAL_TOKEN :
{   <SPACE : " " | "\t" | "\r" | "\n">
}

TOKEN :
{   "<" | ">" // record
|   "{" | "}" // unordered list
|   "[" | "]" // list
|   "," // separator
|   ":"
}

TOKEN :
{   <VARIABLE : "$" (["A"-"Z", "a"-"z", "0"-"9", "_"])+ >
}

TOKEN :
{   <STRING
    : "'" (<SCHAR>|<ESCAPE>)* "'"
    | "\"" (<DCHAR>|<ESCAPE>)* "\""
    >
|   <#SCHAR : ~["\\", "'", "\r", "\n"]>
|   <#DCHAR : ~["\\", "\"", "\r", "\n"]>
|   <#ESCAPE
        : "\\"
            ( ["b", "t", "n", "f", "r", "\"", "'", "\\"]
            | "0" (["0"-"3"])? (["0"-"7"]){1, 2}
            | (["u", "U"])+ (["0"-"9", "A"-"F", "a"-"f"]){4}
            )
    >
}

/**
 * <pre>
 * script :
 *     Value EOF
 * </pre>
 */
private Value script() :
{
    Value value;
}
{
    value = value()
    <EOF>
    {
        return value;
    }
}

/**
 * <pre>
 * Value :
 *     Terminal
 *     OrderedList
 *     UnorderedList
 *     Record
 *     Variable
 * </pre>
 */
private Value value() :
{
    Value value;
}
{
    value = terminal()
    {
        return value;
    }
|
    value = orderedList()
    {
        return value;
    }
|
    value = unorderedList()
    {
        return value;
    }
|
    value = record()
    {
        return value;
    }
|
    value = variable()
    {
        return value;
    }
}

/**
 * <pre>
 * Terminal :
 *     STRING
 * </pre>
 */
private Terminal terminal() :
{
    String string;
}
{
    string = string()
    {
        return Terminal.of(string);
    }
}

/**
 * <pre>
 * OrderedList :
 *   "[" "]"
 *   "[" ValueList "]"
 * </pre>
 */
private Sequence orderedList() :
{
    List<Value> valueList;
}
{
    "["
    (
        valueList = valueList()
    |
        {
            valueList = Collections.emptyList();
        }
    )
    "]"
    {
        return Sequence.ordered(valueList);
    }
}

/**
 * <pre>
 * UnorderedList :
 *   "{" "}"
 *   "{" ValueList "}"
 * </pre>
 */
private Sequence unorderedList() :
{
    List<Value> valueList;
}
{
    "{"
    (
        valueList = valueList()
    |
        {
            valueList = Collections.emptyList();
        }
    )
    "}"
    {
        return Sequence.unordered(valueList);
    }
}

/**
 * <pre>
 * Record :
 *   "<" ">"
 *   "<" EntryList ">"
 * </pre>
 */
private Record record() :
{
    List<Entry> entryList;
}
{
    "<"
    (
        entryList = entryList()
    |
        {
            entryList = Collections.emptyList();
        }
    )
    ">"
    {
        return Record.of(entryList);
    }
}

/**
 * <pre>
 * Variable :
 *   "$" (Identifier)
 * </pre>
 */
private Value variable() :
{
    Token t;
}
{
    t = <VARIABLE>
    {
        return resolve(t);
    }
}

/**
 * <pre>
 * ValueList :
 *     Value
 *     ValueList "," Value
 * </pre>
 */
private List<Value> valueList() :
{
    Value elem;
    List<Value> list = list();
}
{
    elem = value()
    {
        list.add(elem);
    }
    (
        ","
        elem = value()
        {
            list.add(elem);
        }
    )*
    {
        return list;
    }
}

/**
 * <pre>
 * EntryList :
 *     Entry
 *     EntryList "," Entry
 * </pre>
 */
private List<Entry> entryList() :
{
    Entry elem;
    List<Entry> list = list();
}
{
    elem = entry()
    {
        list.add(elem);
    }
    (
        ","
        elem = entry()
        {
            list.add(elem);
        }
    )*
    {
        return list;
    }
}


/**
 * <pre>
 * Entry :
 *     Value ":" Value
 * </pre>
 */
private Entry entry() :
{
    Value key;
    Value value;
}
{
    key = value()
    ":"
    value = value()
    {
        return Entry.of(key, value);
    }
}

private String string() :
{
    Token t;
}
{
    t = <STRING>
    {
        String s = t.image;
        return JavaEscape.unescape(s.substring(1, s.length() - 1));
    }
}
